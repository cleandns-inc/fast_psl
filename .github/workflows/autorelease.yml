name: publish package

on:
  push:
    branches:
      - main
  schedule: # midnight nightly
    - cron: '0 0 * * *'
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Refresh PSL
      run: | # get the latest public suffix list and write to file
        make refresh-psl-curl
      shell: bash

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Add deployment key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY_PRIVKEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
      shell: bash

    - name: Commit and push
      run: |
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add .
          git commit -m "Update PSL"
          git push
        fi
      shell: bash

    - name: Get the date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d')"

    - name: install jq
      run: |
        sudo apt-get install -y jq
      shell: bash

    - name: Get latest release number
      id: latest_release
      run: |
        LATEST_RELEASE_TAG=$(curl --silent "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" \
        | jq -r .tag_name)
        echo "::set-output name=tag::${LATEST_RELEASE_TAG}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash

    - name: Set Release Number
      id: set_release_number
      run: |
        set -x
        OLD_DATE=$(echo "${{ steps.latest_release.outputs.tag }}" | awk -F'.' '{print $3}' | grep -oP '^\d{8}')
        TODAY=$(echo "${{ steps.date.outputs.date }}" | grep -oP '^\d{8}')
        LATEST_RELEASE_NUMBER=$(echo "${{ steps.latest_release.outputs.tag }}" | grep -oP 'r\K[0-9]+$') || true
        if [ "$OLD_DATE" == "$TODAY" ]; then
          if [ -z "$LATEST_RELEASE_NUMBER" ]; then
            NEW_RELEASE_NUMBER=1
          else
            NEW_RELEASE_NUMBER=$((LATEST_RELEASE_NUMBER + 1))
          fi
        else
          NEW_RELEASE_NUMBER=1
        fi
        echo "::set-output name=release_number::${NEW_RELEASE_NUMBER}"
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.1.${{ steps.date.outputs.date }}r${{ steps.set_release_number.outputs.release_number }}
        release_name: Release v0.1.${{ steps.date.outputs.date }}r${{ steps.set_release_number.outputs.release_number }}
        draft: false
        prerelease: false